#include <stdio.h>

void best(int b_size[], int blocks, int p_size[], int processes)
{
    int i,j;
    int allo[processes];
    for(i = 0; i < processes; i++){
        allo[i] = -1;
    }
    for (i=0; i < processes; i++)
    {
        int index = -1;
        for (j=0; j < blocks; j++) 
        { 
            if (b_size[j] >= p_size[i])
            {
                if (index == -1)
                    index = j;
                else if (b_size[j] < b_size[index])
                    index = j;
            }
        }
        if (index != -1)
        {
            allo[i] = index;
            b_size[index] -= p_size[i];
        }
    }
 
    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for (i = 0; i < processes; i++)
    {
        printf("%d \t\t\t %d \t\t\t", i+1, p_size[i]);
        if (allo[i] != -1)
            printf("%d\n",allo[i] + 1);
        else
            printf("Not Allocated\n");
    }
}
int main()
{
    int b_size[] = {300,600,350,200,750,125};
    int p_size[] = {115,500,358,200,375};
    int blocks = sizeof(b_size)/sizeof(b_size[0]);
    int processes = sizeof(p_size)/sizeof(p_size[0]);
 
    best(b_size, blocks, p_size, processes);
 
    return 0 ;
}
